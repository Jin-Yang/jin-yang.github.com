#!/usr/bin/env perl

# ########################################################################
# This program is part of Aspersa (http://code.google.com/p/aspersa/)
#
# This program reads in lines and splits them into words.  It counts how many
# words each line has, and if there is one number that predominates, it assumes
# this is the number of words in each line.  Then it discards all lines that
# don't have that many words, and looks at the 2nd line that DOES.  It assumes
# this is the first non-header line.  Based on whether each word looks numeric
# or not, it decides on column alignment.  Finally, it goes through and decides
# how wide each column should be, and then prints them out.
#
# This is useful for things like aligning the output of vmstat or iostat so it
# is easier to read.
#
# Author: Baron Schwartz
# ########################################################################

use strict;
use warnings FATAL => 'all';

# Finds the max element in the list
sub max {
   my $i = shift @_;
   foreach my $n ( @_ ) {
      $i = $n if $n > $i;
   }
   return $i;
}

# Read all lines
my @lines;
my %word_count;
while ( <> ) {
   my $line = $_;
   my @words = $line =~ m/(\S+)/g;
   push @lines, \@words;
   $word_count{ scalar @words }++;
}

# Find max number of words per line
my @wc = reverse sort { $word_count{$a}<=>$word_count{$b} } keys %word_count;
my $m_words = $wc[0];

# Filter out non-conformists
@lines = grep { scalar @$_ == $m_words } @lines;
die "I need at least 2 lines" unless @lines > 1;

# Find the widths and alignments of each column
my @fmt;
foreach my $i ( 0 .. $m_words-1 ) {
   my $m_len = max(map { length($_->[$i]) } @lines);
   my $code  = $lines[1]->[$i] =~ m/[^0-9.-]/ ? "%-${m_len}s" : "%${m_len}s";
   push @fmt, $code;
}
my $fmt = join(' ', @fmt) . "\n";

# Print!
foreach my $l ( @lines ) {
   printf $fmt, @$l;
}
